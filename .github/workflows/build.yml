name: Build and Artifact the ESP-IDF Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Set permissions for the workflow
permissions:
  contents: write  # Allow writing to repository
  actions: read    # Allow reading workflow info

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # First, checkout your repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      # ESP-IDF Build
      - name: ESP-IDF Build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4.1
          target: esp32c6
          path: '.'

      # Extract binary sizes and create CSV
      - name: Extract binary sizes and create CSV
        run: |
          echo "=== Extracting binary file sizes ==="

          # Create CSV header if file doesn't exist
          if [ ! -f build_sizes.csv ]; then
            echo "timestamp,bootloader_size,partition_table_size,main_binary_size,total_size,git_commit" > build_sizes.csv
          fi

          # Get current timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

          # Get git commit hash
          GIT_COMMIT=$(git rev-parse --short HEAD)

          # Extract file sizes (in bytes)
          BOOTLOADER_SIZE=0
          PARTITION_SIZE=0
          MAIN_BINARY_SIZE=0

          if [ -f "build/bootloader/bootloader.bin" ]; then
            BOOTLOADER_SIZE=$(stat -c%s "build/bootloader/bootloader.bin")
            echo "Bootloader size: $BOOTLOADER_SIZE bytes"
          fi

          if [ -f "build/partition_table/partition-table.bin" ]; then
            PARTITION_SIZE=$(stat -c%s "build/partition_table/partition-table.bin")
            echo "Partition table size: $PARTITION_SIZE bytes"
          fi

          # Find the main binary (should be *.bin in build root, excluding bootloader and partition)
          MAIN_BINARY=$(find build/ -maxdepth 1 -name "*.bin" -not -name "bootloader.bin" -not -name "partition-table.bin" | head -1)
          if [ -n "$MAIN_BINARY" ] && [ -f "$MAIN_BINARY" ]; then
            MAIN_BINARY_SIZE=$(stat -c%s "$MAIN_BINARY")
            echo "Main binary ($MAIN_BINARY) size: $MAIN_BINARY_SIZE bytes"
          fi

          # Calculate total size
          TOTAL_SIZE=$((BOOTLOADER_SIZE + PARTITION_SIZE + MAIN_BINARY_SIZE))
          echo "Total binary size: $TOTAL_SIZE bytes"

          # Export to GitHub environment for use in later steps
          echo "TOTAL_SIZE=$TOTAL_SIZE" >> $GITHUB_ENV
          echo "BOOTLOADER_SIZE=$BOOTLOADER_SIZE" >> $GITHUB_ENV
          echo "PARTITION_SIZE=$PARTITION_SIZE" >> $GITHUB_ENV
          echo "MAIN_BINARY_SIZE=$MAIN_BINARY_SIZE" >> $GITHUB_ENV

          # Create new CSV entry
          NEW_ENTRY="\"$TIMESTAMP\",$BOOTLOADER_SIZE,$PARTITION_SIZE,$MAIN_BINARY_SIZE,$TOTAL_SIZE,$GIT_COMMIT"
          echo "New entry: $NEW_ENTRY"

          # Check if this entry already exists (compare sizes and commit)
          if [ -f build_sizes.csv ]; then
            LAST_ENTRY=$(tail -n 1 build_sizes.csv)
            LAST_SIZES=$(echo "$LAST_ENTRY" | cut -d',' -f2-5)
            CURRENT_SIZES="$BOOTLOADER_SIZE,$PARTITION_SIZE,$MAIN_BINARY_SIZE,$TOTAL_SIZE"

            echo "Last entry sizes: $LAST_SIZES"
            echo "Current sizes: $CURRENT_SIZES"

            if [ "$LAST_SIZES" = "$CURRENT_SIZES" ]; then
              echo "No size changes detected - skipping CSV update"
              echo "SIZES_CHANGED=false" >> $GITHUB_ENV
            else
              echo "Size changes detected - will update CSV"
              echo "$NEW_ENTRY" >> build_sizes.csv
              echo "SIZES_CHANGED=true" >> $GITHUB_ENV
            fi
          else
            echo "First build - creating CSV"
            echo "$NEW_ENTRY" >> build_sizes.csv
            echo "SIZES_CHANGED=true" >> $GITHUB_ENV
          fi

          # Display current CSV contents
          echo "=== Current build_sizes.csv ==="
          cat build_sizes.csv

      # Check if there are changes to commit
      - name: Check for changes
        id: git-check
        run: |
          git add build_sizes.csv
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected in build_sizes.csv"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      # Commit and push changes only if sizes changed
      - name: Commit build size changes
        if: env.SIZES_CHANGED == 'true' && env.HAS_CHANGES == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add build_sizes.csv
          git commit -m "Update build sizes - Bootloader: ${{ env.BOOTLOADER_SIZE }}B, Partition: ${{ env.PARTITION_SIZE }}B, Main: ${{ env.MAIN_BINARY_SIZE }}B, Total: ${{ env.TOTAL_SIZE }}B [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload build artifacts
      - name: Archive ESP32 binaries
        uses: actions/upload-artifact@v4
        with:
          name: esp32-binaries
          path: |
            build/bootloader/bootloader.bin
            build/partition_table/partition-table.bin
            build/*.bin

      # Upload CSV file as artifact too
      - name: Archive build sizes CSV
        uses: actions/upload-artifact@v4
        with:
          name: build-sizes-csv
          path: build_sizes.csv
